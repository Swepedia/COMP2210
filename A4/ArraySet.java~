import java.util.Iterator;
import java.util.Arrays;
import java.lang.Math;
import java.lang.StringBuilder;
import java.util.NoSuchElementException;

/**
 * ArraySet.java.
 *
 * Provides an implementation of the Set interface using an
 * array as the underlying data structure. Values in the array
 * are kept in ascending natural order and, where possible,
 * methods take advantage of this. Many of the methods with parameters
 * of type ArraySet are specifically designed to take advantage
 * of the ordered array implementation.
 *
 * @author Your Name (yourTigerMail@auburn.edu)
 * @author	Dean Hendrix (dh@auburn.edu)
 * @version	2016-09-29
 *
 */
public class ArraySet<T extends Comparable<? super T>> implements Set<T> {

   ////////////////////////////////////////////
   // DO NOT CHANGE THE FOLLOWING TWO FIELDS //
   ////////////////////////////////////////////
   T[] elements;
   int size;

   ////////////////////////////////////
   // DO NOT CHANGE THIS CONSTRUCTOR //
   ////////////////////////////////////
   /**
    * Instantiates an empty set.
    */
   @SuppressWarnings("unchecked")
   public ArraySet() {
      elements = (T[]) new Comparable[1];
      size = 0;
   }
    
   @SuppressWarnings("unchecked")
   private ArraySet(T[] s) {
      elements = (T[]) new Comparable[1];
      size = s.length;
      elements = Arrays.copyOf(s, s.length);
   }

   ///////////////////////////////////
   // DO NOT CHANGE THE SIZE METHOD //
   ///////////////////////////////////
   /**
    * Returns the current size of this collection.
    *
    * @return  the number of elements in this collection.
    */
   public int size() {
      return size;
   }

   //////////////////////////////////////
   // DO NOT CHANGE THE ISEMPTY METHOD //
   //////////////////////////////////////
   /**
    * Tests to see if this collection is empty.
    *
    * @return  true if this collection contains no elements,
    *               false otherwise.
    */
   public boolean isEmpty() {
      return size == 0;
   }

   ///////////////////////////////////////
   // DO NOT CHANGE THE TOSTRING METHOD //
   ///////////////////////////////////////
   /**
    * Return a string representation of this ArraySet.
    *
    * @return a string representation of this ArraySet
    */
   @Override
   public String toString() {
      if (isEmpty()) {
         return "[]";
      }
      StringBuilder result = new StringBuilder();
      result.append("[");
      for (T element : this) {
         result.append(element + ", ");
      }
      result.delete(result.length() - 2, result.length());
      result.append("]");
      return result.toString();
   }

    /**
     * Ensures the collection contains the specified element. Elements are
     * maintained in ascending natural order at all times. Neither duplicate nor
     * null values are allowed.
     *
     * @param  element  The element whose presence is to be ensured.
     * @return true if collection is changed, false otherwise.
     */
   public boolean add(T element) {
      if(element != null && !contains(element)) {
         if(size >= elements.length) {
            elements = Arrays.copyOf(elements, elements.length * 2);
         }
         if(size == 0) {
            elements[0] = element;
            size++;
            return true;
         }
         for(int i = 0; i < size; i++) {
            if(element.compareTo(elements[i]) < 0) {
               T next = elements[i];
               T after = elements[i + 1];
               elements[i] = element;
               for(int j = i + 1; j <= size; j++) {
                  elements[j] = next;
                  next = after;
                  if(j < size) {
                     after = elements[j + 1];
                  }
               }
               size++;
               return true;
            }
         }
         elements[size] = element;
         size++;
         return true;
      }
      return false;
   }

    /**
     * Ensures the collection does not contain the specified element.
     * If the specified element is present, this method removes it
     * from the collection. Elements are maintained in ascending natural
     * order at all times.
     *
     * @param   element  The element to be removed.
     * @return  true if collection is changed, false otherwise.
     */
   public boolean remove(T element) {
      if(element != null && size > 0 && contains(element)) {
         for(int i = 0; i < size; i++) {
            if(element.equals(elements[i])) {
               for(int j = i; j < size; j++) {
                  elements[j] = elements[j + 1];
               }
               size--;
               if((double)size / elements.length < 0.25) {
                  elements = Arrays.copyOf(elements, elements.length / 2);
               }
               return true;
            }
         }
      }
      return false;
   }

   /**
    * Searches for specified element in this collection.
    *
    * @param   element  The element whose presence in this collection
    *                   is to be tested.
    * @return  true if this collection contains the specified element,
    *               false otherwise.
    */

   public boolean contains(T element) {
      return search(element, 0, size);
   }

   private boolean search(T target, int left, int right) {
      if(this.size() == 0) {
         return false;
      }
      if(this.size() == 1 && elements[0].equals(target)) {
         return true;
      }
      else if(this.size() == 1 && !elements[0].equals(target)) {
         return false;
      }
      
      if(this.size() == 2 && (elements[0].equals(target) || elements[1].equals(target))) {
         return true;
      }
      else if(this.size() == 2 && !(elements[0].equals(target) || elements[1].equals(target))) {
         return false;
      }
   //      if(this.size() == 1 && !elements[0].equals(target)) {
   //         return false;
   //      }
   //      else if(this.size() == 1 && elements[0].equals(target)) {
   //         return true;
   //      }
   //      if(left > right) {
   //         return false;
   //      }
      // int m = left + (left + right) / 2;
      // if(elements[m].compareTo(target) < 0) {
         // search(target, m + 1, right);
      // }
      // else if(elements[m].compareTo(target) > 0) {
         // search(target, left, m - 1);
      // }
      // return true;
      if(Arrays.binarySearch(elements, 0, this.size(), target, null) >= 0) {
         return true;
      }
      return false;
   }


   /**
    * Tests for equality between this set and the parameter set.
    * Returns true if this set contains exactly the same elements
    * as the parameter set, regardless of order.
    *
    * @return  true if this set contains exactly the same elements
    *               as the parameter set, false otherwise
    */
   public boolean equals(Set<T> s) {
      if(s.size() != this.size) 
         return false;
   
      for(int i = 0; i < size; i++) {
         if(!s.contains(elements[i])) {
            return false;
         }
      }
      return true;
   }

   /**
    * Tests for equality between this set and the parameter set.
    * Returns true if this set contains exactly the same elements
    * as the parameter set, regardless of order.
    *
    * @return  true if this set contains exactly the same elements
    *               as the parameter set, false otherwise
    */
   public boolean equals(ArraySet<T> s) {
      if(s.size != this.size) 
         return false;
   
      for(int i = 0; i < size; i++) {
         if(s.elements[i].compareTo(this.elements[i]) != 0) {
            return false;
         }
      }
      return true;
   }

   /**
    * Returns a set that is the union of this set and the parameter set.
    *
    * @return  a set that contains all the elements of this set and
    *            the parameter set
    */
   public Set<T> union(Set<T> s) {
      Set<T> joint = new ArraySet<T>();
      for(int i = 0; i < this.size; i++) {
         joint.add(elements[i]);
      }
      Iterator<T> iterate = s.iterator();
      for(int i = 0; i < s.size(); i++) {
         joint.add(iterate.next());
      }
      return joint;
   }

   /**
    * Returns a set that is the union of this set and the parameter set.
    *
    * @return  a set that contains all the elements of this set and
    *            the parameter set
    */
   public Set<T> union(ArraySet<T> s) {
      ArraySet<T> joint = new ArraySet<T>();
      int j = 0;
      if(size >= s.size()) {
         for(int i = 0; i < size; i++) {
            if(j == s.size()) {
               for(int k = i; k < size; k++) {
                  joint.add(elements[k]);
               }
               return joint;
            }
            if(this.elements[i].compareTo(s.elements[j]) <= 0) {
               joint.add(elements[i]);
               j++;
            }
            else {
               for(; j < s.size; j++) {
                  if(s.elements[j].compareTo(elements[i]) <= 0) {
                     joint.add(s.elements[j]);
                  }
                  else {
                     break;
                  }
               }
            }
         }
         return joint;
      }
      else {
         for(int i = 0; i < s.size(); i++) {
            if(j == this.size()) {
               for(int k = i; k < s.size; k++) {
                  joint.add(s.elements[k]);
               }
               return joint;
            }
            if(s.elements[i].compareTo(this.elements[j]) <= 0) {
               joint.add(s.elements[i]);
               j++;
            }
            else {
               for(; j < this.size; j++) {
                  if(this.elements[j].compareTo(s.elements[i]) <= 0) {
                     joint.add(this.elements[j]);
                  }
                  else {
                     break;
                  }
               }
            }
         }
         return joint;
      
      }
   
   }
   /**
    * Returns a set that is the intersection of this set
    * and the parameter set.
    *
    * @return  a set that contains elements that are in both
    *            this set and the parameter set
    */
   public Set<T> intersection(Set<T> s) {
      Set<T> junction = new ArraySet<T>();
      for(int i = 0; i < size; i++) {
         if(s.contains(elements[i])) {
            junction.add(elements[i]);
         }
      }
      return junction;
   }

   /**
    * Returns a set that is the intersection of this set and
    * the parameter set.
    *
    * @return  a set that contains elements that are in both
    *            this set and the parameter set
    */
   public Set<T> intersection(ArraySet<T> s) {
      ArraySet<T> junction = new ArraySet<T>();
      int j = 0;
      for(int i = 0; i < size; i++) {
         if(j >= s.size()) {
            break;
         }
         if(elements[i].compareTo(s.elements[j]) == 0) {
            junction.add(elements[i]);
            j++;
         }
         else if(elements[i].compareTo(s.elements[j]) > 0 ) {
            for(; j < s.size(); j++) {
               if(elements[i].compareTo(s.elements[j]) <= 0) {
                  break;
               }
            }
            if(j < s.size && elements[i].equals(s.elements[j])) {
               junction.add(elements[i]);
            }
         }
      }
      return junction;
   }

   /**
    * Returns a set that is the complement of this set and
    * the parameter set.
    *
    * @return  a set that contains elements that are in this
    *            set but not the parameter set
    */
   public Set<T> complement(Set<T> s) {
      Set<T> nice = new ArraySet<T>();
      for(int i = 0; i < size; i++) {
         if(!s.contains(elements[i])) {
            nice.add(elements[i]);
         }
      }
      return nice;
   }

   /**
    * Returns a set that is the complement of this set and
    * the parameter set.
    *
    * @return  a set that contains elements that are in this
    *            set but not the parameter set
    */
   public Set<T> complement(ArraySet<T> s) {
      ArraySet<T> nice = new ArraySet<T>();
      int j = 0;
      if(s.size() == 0) {
         return this;
      }
      for(int i = 0; i < size; i++) {
         if(elements[i].compareTo(s.elements[j]) < 0) {
            nice.add(elements[i]);
         }
         else if(elements[i].compareTo(s.elements[j]) > 0) {
            for(;j < s.size(); j++) {
               if(elements[i].compareTo(s.elements[j]) <= 0) {
                  break;
               }
            }
            if(j >= s.size()) {
               for(; i < size; i++) {
                  nice.add(elements[i]);
               }
               return nice;
            }
            if(elements[i].compareTo(s.elements[j]) < 0) {
               nice.add(elements[i]);
            }
         }
         else {
            j++;
         }
      }
      return nice;
   }

   /**
    * Returns an iterator over the elements in this ArraySet.
    * No specific order can be assumed.
    *
    * @return  an iterator over the elements in this ArraySet
    */
   @SuppressWarnings("unchecked")
   public Iterator<T> iterator() {
   
      // ALMOST ALL THE TESTS DEPEND ON THIS METHOD WORKING CORRECTLY.
      // MAKE SURE YOU GET THIS ONE WORKING FIRST.
      // HINT: JUST USE THE SAME CODE/STRATEGY AS THE ARRAYBAG CLASS
      // FROM LECTURE. THE ONLY DIFFERENCE IS THAT YOU'LL NEED THE
      // ARRAYITERATOR CLASS TO BE NESTED, NOT TOP-LEVEL.
       
      class ArrayIterator implements Iterator {
         private T[] items;
         private int count;
         private int current;
      
         public ArrayIterator() {
            items = Arrays.copyOf(elements, elements.length);
            count = size;
            current = 0;
         }
         @Override
         public boolean hasNext() {
            return current < size;
         }
         @Override
         public void remove() {
            throw new UnsupportedOperationException();
         }
         @Override
         public T next() {
            if(!hasNext()) {
               throw new NoSuchElementException();
            }
            
            return items[current++];
         } 
      }
      return new ArrayIterator();
   }

   /**
    * Returns an iterator over the elements in this ArraySet.
    * The elements are returned in descending order.
    *
    * @return  an iterator over the elements in this ArraySet
    */
   @SuppressWarnings("unchecked")
   public Iterator<T> descendingIterator() {
      class DescendIterator implements Iterator {
         private T[] items;
         private int count;
         private int current;
      
         public DescendIterator() {
            items = Arrays.copyOf(elements, elements.length);
            count = size;
            current = count - 1;
         }
      
         public boolean hasNext() {
            return current >= 0;
         }
      
         public void remove() {
            throw new UnsupportedOperationException();
         }
      
         public T next() {
            if(!hasNext()) {
               throw new NoSuchElementException();
            }
            return items[current--];
         } 
      }
      return new DescendIterator();
   }

   /**
    * Returns an iterator over the members of the power set
    * of this ArraySet. No specific order can be assumed.
    *
    * @return  an iterator over members of the power set
    */
   @SuppressWarnings("unchecked")
   public Iterator<Set<T>> powerSetIterator() {
      class PowerIterator implements Iterator {
         private T[] items;
         private int count;
         private int current;
      
         public PowerIterator() {
            items = Arrays.copyOf(elements, elements.length);
            count = size;
            current = 0;
         }
         @Override
         public boolean hasNext() {
            return current < Math.pow(2, count);
         }
         @Override
         public void remove() {
            throw new UnsupportedOperationException();
         }
         @Override
         public Set<T> next() {
            if(!hasNext()) {
               throw new NoSuchElementException();
            }
            
            StringBuilder binary = new StringBuilder();
            binary.append(Integer.toBinaryString(current).toCharArray());
            //int arraySize = Integer.MAX_VALUE & count;
            // for(int i = 0; i < binary.length(); i++) {
               // if(binary.charAt(i) == '1') {
                  // arraySize++;
               // }
            // }
            //T[] stuff = new T[arraySize];
            Set<T> stuff = new ArraySet<>();
            for(; binary.length() < size;) {
               binary.insert(0, 0);
            }
            for(int i = 0; i < binary.length(); i++) {
               if(binary.charAt(i) == '1') {
                  stuff.add(items[i]);
               }
            }
            current++;
            return stuff;  
         } 
      }
      return new PowerIterator();
   }
   // private ArraySet<T> powerSetConstructor(T[] s) {
      // ArraySet<T> set = new ArraySet<T>();
      // set.add(getPowerSet(elements, 0));
      // return set;
      // }
   // private T getPowerSet(T[] s, int start){
      // int e = start;
      // return null;
      // }
}
